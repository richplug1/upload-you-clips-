#!/usr/bin/env node

/**
 * Script de test pour valider la configuration des services cloud
 * Usage: node test-cloud-services.js
 */

const path = require('path');
const fs = require('fs');

// Load environment variables
require('dotenv').config({ path: path.join(__dirname, '.env') });

const cloudStorage = require('./services/cloudStorage');
const emailService = require('./services/emailService');
const logger = require('./services/logger');

async function testCloudServices() {
  console.log('üîç Test des Services Cloud - Upload You Clips\n');
  
  const results = {
    cloudStorage: { configured: false, tested: false, error: null },
    emailService: { configured: false, tested: false, error: null }
  };
  
  // Test Cloud Storage
  console.log('‚òÅÔ∏è Test du Stockage Cloud (S3)...');
  try {
    results.cloudStorage.configured = cloudStorage.isConfigured();
    
    if (results.cloudStorage.configured) {
      console.log('‚úÖ Configuration d√©tect√©e');
      
      // Test basic functionality
      const stats = await cloudStorage.getStorageStats();
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', {
        bucket: stats.bucket,
        region: stats.region,
        files: stats.totalFiles,
        size: stats.totalSizeMB + ' MB'
      });
      
      results.cloudStorage.tested = true;
      console.log('‚úÖ Stockage cloud: FONCTIONNEL\n');
    } else {
      console.log('‚ö†Ô∏è Stockage cloud non configur√© (mode local actif)');
      console.log('üí° Variables manquantes:', cloudStorage.getMissingVars());
      console.log('üìñ Voir CLOUD_SERVICES_SETUP.md pour la configuration\n');
    }
  } catch (error) {
    results.cloudStorage.error = error.message;
    console.log('‚ùå Erreur stockage cloud:', error.message);
    console.log('üîß V√©rifiez vos cl√©s API AWS/S3\n');
  }
  
  // Test Email Service
  console.log('üìß Test du Service Email (SMTP)...');
  try {
    results.emailService.configured = emailService.isConfigured();
    
    if (results.emailService.configured) {
      console.log('‚úÖ Configuration d√©tect√©e');
      
      // Test connection (without sending actual email)
      const testResult = await emailService.testConnection();
      if (testResult.success) {
        console.log('‚úÖ Connexion SMTP √©tablie');
        results.emailService.tested = true;
        console.log('‚úÖ Service email: FONCTIONNEL\n');
      } else {
        console.log('‚ùå √âchec de connexion SMTP:', testResult.error);
      }
    } else {
      console.log('‚ö†Ô∏è Service email non configur√© (mode console actif)');
      console.log('üí° Variables manquantes:', emailService.getMissingVars());
      console.log('üìñ Voir CLOUD_SERVICES_SETUP.md pour la configuration\n');
    }
  } catch (error) {
    results.emailService.error = error.message;
    console.log('‚ùå Erreur service email:', error.message);
    console.log('üîß V√©rifiez vos param√®tres SMTP\n');
  }
  
  // Summary
  console.log('üìä R√âSUM√â DES TESTS\n');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ Service         ‚îÇ Configur√©   ‚îÇ Test√©       ‚îÇ Statut      ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  
  const cloudStatus = results.cloudStorage.configured ? 
    (results.cloudStorage.tested ? '‚úÖ OK' : '‚ö†Ô∏è Erreur') : 
    '‚ö†Ô∏è Non conf.';
  console.log(`‚îÇ Stockage Cloud  ‚îÇ ${results.cloudStorage.configured ? '‚úÖ Oui' : '‚ùå Non'}      ‚îÇ ${results.cloudStorage.tested ? '‚úÖ Oui' : '‚ùå Non'}      ‚îÇ ${cloudStatus.padEnd(11)} ‚îÇ`);
  
  const emailStatus = results.emailService.configured ? 
    (results.emailService.tested ? '‚úÖ OK' : '‚ö†Ô∏è Erreur') : 
    '‚ö†Ô∏è Non conf.';
  console.log(`‚îÇ Service Email   ‚îÇ ${results.emailService.configured ? '‚úÖ Oui' : '‚ùå Non'}      ‚îÇ ${results.emailService.tested ? '‚úÖ Oui' : '‚ùå Non'}      ‚îÇ ${emailStatus.padEnd(11)} ‚îÇ`);
  
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');
  
  // Recommendations
  console.log('üí° RECOMMANDATIONS\n');
  
  if (!results.cloudStorage.configured) {
    console.log('üìÅ Stockage Cloud:');
    console.log('   ‚Ä¢ Mode local actif (fichiers stock√©s sur le serveur)');
    console.log('   ‚Ä¢ Pour production: configurez AWS S3, DigitalOcean Spaces, ou Cloudflare R2');
    console.log('   ‚Ä¢ Voir CLOUD_SERVICES_SETUP.md pour les √©tapes d√©taill√©es\n');
  }
  
  if (!results.emailService.configured) {
    console.log('üìß Service Email:');
    console.log('   ‚Ä¢ Mode console actif (emails affich√©s dans les logs)');
    console.log('   ‚Ä¢ Pour production: configurez Gmail, SendGrid, ou votre serveur SMTP');
    console.log('   ‚Ä¢ Voir CLOUD_SERVICES_SETUP.md pour les √©tapes d√©taill√©es\n');
  }
  
  const allConfigured = results.cloudStorage.configured && results.emailService.configured;
  const allTested = results.cloudStorage.tested && results.emailService.tested;
  
  if (allConfigured && allTested) {
    console.log('üéâ Tous les services cloud sont configur√©s et fonctionnels!');
    console.log('‚úÖ Votre application est pr√™te pour la production.');
  } else if (allConfigured) {
    console.log('‚ö†Ô∏è Services configur√©s mais avec des erreurs de connexion.');
    console.log('üîß V√©rifiez vos cl√©s API et param√®tres de connexion.');
  } else {
    console.log('‚ÑπÔ∏è Application fonctionnelle en mode local/d√©veloppement.');
    console.log('‚òÅÔ∏è Configurez les services cloud pour la production.');
  }
  
  console.log('\nüìñ Documentation compl√®te: CLOUD_SERVICES_SETUP.md');
  console.log('üöÄ Pour red√©marrer avec la nouvelle config: npm run dev');
  
  return results;
}

// Execute if called directly
if (require.main === module) {
  testCloudServices().catch(error => {
    console.error('‚ùå Erreur lors du test:', error.message);
    process.exit(1);
  });
}

module.exports = testCloudServices;
